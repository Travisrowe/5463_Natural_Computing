GA with 1D Array genome
    Point is to find x and y values that reach the peak of a hill in a graph equation.
    
    NOTE! Crossover in ANY GA should preserve the original Chromosomes. In other words, you should return offspring Chroms and not
    just replace the parent Chroms and put them in the new population. That destroys the parents! and gives the offspring a chance
    to be picked for crossover before they're even born! (Whoopsies)

    Chromsome size of 2 random numbers between -5 and 5
        rand()/(double)rand_max * 10.0 - 5.0
    
    fitness = exp(-x*x + -y*y) + 2 * exp(-(x - 1.7)*(x - 1.7) - (y - 1.7) * (y - 1.7));
    
    Mutate(double prob)
    {
        double variation;
        double mut_range = .2; //dependent on the problem
        for(loop i through Chrom_size)
        {
            if rand()/rand_max < prob
                variation = rand() / rand_max * mut_range - mut_range / 2;
                genees[i] += variation
        }
        UpdateFitness;
    }
    
GA with Diophantine Equation
    A Diophantine Equation is where you have some f(x, y) where you want to find the values that will set f(x, y) = 0
    ex) 0 = x^2 + y^2 - xy - 10
        vector<int> gene(2); //gene[0] = x, gene[1] = y
        fitness = abs(gene[0] * gene[0] + gene[1] * gene[1] - gene[0] * gene[1] - 10); // apparently gene[0] * gene[0] is faster than Pow(gene[0], 2)
        
GAFramework off Simpson's Y Drive