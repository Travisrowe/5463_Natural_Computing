Test Wednesday
	Study Pseudocodes from the book
		CFO + GSA + Simulated Annealling
		//CFO is deterministic (not random)
		//most other algorithms in this class are stochastic (random)
	Study CFO program where he modifies parameters (velocity, position, acceleeration, etc)

Gravitational Search Algorithm
	F = G * ((M1 * M2) / R^2) //magnitude
	//M1 is mass of object 1, M2 is of object 2, R is the distance between the objects
	//To get the direction of this force, we divide the length of the vector by the 
		//distance between the objects (which gets a vector of length 1). Now we have a force (magnitude)
		//and a direction
		
	Three kinds of masses
		Active gravitational mass Ma
		Passive gravitational mass Mp
		Inertial mass - the acceleeration of a particle is equal to the force acting on it divided by its inertial mass
			heavier (more fit) particles do not have their acceleeration changed much.
			a = F / m
		
	The gravitational force Fij that acts on mass i by mass j is
		//passive of i (you gotta come to me) times the active of j
		Fij = G * ((Maj * Mpi) / (R^2 + epsilon)) //epsilon is a small constant, avoids div by 0 err
		
	Agents update their velocities and positions like this
		Xi(t + 1) = Xi(t) + Vi(t) //t is the iteration, so t + 1 just means "new position"
		Vi(t + 1) = randi * Vi(t) + ai(t) //randi just gives this a random search characteristic
			i is between 0 and 1
		
	Fitness function and mass are equivalent in this program
	
	Instead of calculating forces for all particles, take the best k objects and calculate forces toward
		those motherfuckers. 
		At the start of the program, k = n : all particles attract all others, 
		but as the program goes on, k decreases
		
		Fi(t) = sum(kbest ; randj * Fij(t))

	Gravitational constant is reduced over time like in simulated annealling
	
	masses are calculated like so
		mi(t) = ( f(xi(t)) - worst(t) ) / ( best(t) - worst(t) )
		Mi(t) = mi(t) / sum(of all other masses : mj(t) )
	
Algorithm
{
	Identify search space;
	Perform randomized initialization;
	while(!finished)
	{
		for( all i in N )
			Update Mi(t)
			Update G(t), best(t), worst(t);
			Calculate total force on agent i
			Calculate acceleeration and velocity;
			Update agent's position
	}
}
	